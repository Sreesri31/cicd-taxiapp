def registry ="https://taxi31.jfrog.io/"
def imageName = 'taxi31.jfrog.io/taxi-docker-local/taxiapp'
def version   = '1.0.1'
pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    environment {
        PATH = "/opt/apache-maven-3.9.6/bin:$PATH"
        SONAR_TOKEN = credentials('SONAR_TOKEN')
    }
    stages {
        stage("Build") {
            steps {
                echo "----------- Build Started ----------"
                sh 'mvn package'
                echo "----------- Build Completed ----------"
            }
        }

        stage("Unit Test") {
            steps {
                echo "----------- Unit Test Started ----------"
                sh 'mvn surefire-report:report'
                echo "----------- Unit Test Completed ----------"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "----------- SonarQube Analysis Started ----------"
                script {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=taxibooking-app_cicd-taxi-bookingapp \
                        -Dsonar.organization=taxibooking-app \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.token=${SONAR_TOKEN}
                    """
                }
                echo "----------- SonarQube Analysis Completed ----------"
            }
        }
    //     stage("Jar Publish") {
    //     steps {
    //         script {
    //                 echo '<--------------- Jar Publish Started --------------->'
    //                  def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog-cred"
    //                  def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
    //                  def uploadSpec = """{
    //                       "files": [
    //                         {
    //                           "pattern": "/home/ubuntu/jenkins/workspace/taxi-booking/taxi-booking/target/(*)",
    //                           "target": "taxi-libs-release-local/{1}",
    //                           "flat": "false",
    //                           "props" : "${properties}",
    //                           "exclusions": [ "*.sha1", "*.md5"]
    //                         }
    //                      ]
    //                  }"""
    //                  def buildInfo = server.upload(uploadSpec)
    //                  buildInfo.env.collect()
    //                  server.publishBuildInfo(buildInfo)
    //                  echo '<--------------- Jar Publish Ended --------------->'  
    //          }
    //     }   
    // }
    stage("Jar Publish") {
  steps {
    script {
      echo "Jar Publish Started"
      // 1) Get the server from your global config by its Server ID:
      def server = Artifactory.server "jfrog-cred"
      // 2) Build properties
      def props = "buildId=${env.BUILD_ID};commitId=${env.GIT_COMMIT}"
      // 3) Upload spec—relative to the workspace:
      def uploadSpec = """{
        "files": [
          {
            "pattern": "target/*.jar",
            "target": "taxi-libs-release-local/",
            "flat": "true",
            "props": "${props}"
          }
        ]
      }"""
       echo "Jar Publish Startedhgs"
      // 4) Do the upload
      def buildInfo = server.upload spec: uploadSpec
      // 5) (Optional) Inspect what got uploaded
      echo "→ Deployed artifacts: ${buildInfo.deployedArtifacts*.toString()}"
      // 6) Publish build-info for metadata
      server.publishBuildInfo buildInfo
      echo "✅ Jar Publish Completed"
    }
  }
}
    stage(" Docker Build ") {
      steps {
        script {
           echo '<--------------- Docker Build Started --------------->'
           app = docker.build(imageName+":"+version)
           echo '<--------------- Docker Build Ends --------------->'
        }
      }
    }
     stage (" Docker Publish "){
        steps {
            script {
               echo '<--------------- Docker Publish Started --------------->'  
                docker.withRegistry(registry, 'jfrog-cred'){
                    app.push()
                }    
               echo '<--------------- Docker Publish Ended --------------->'  
            }
        }
    }

}
}
